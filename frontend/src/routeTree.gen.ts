/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as UserIdIndexImport } from './routes/$userId/index'
import { Route as PublicLoginImport } from './routes/_public/login'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const UserIdIndexRoute = UserIdIndexImport.update({
  id: '/$userId/',
  path: '/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/$userId/': {
      id: '/$userId/'
      path: '/$userId'
      fullPath: '/$userId'
      preLoaderRoute: typeof UserIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/login': typeof PublicLoginRoute
  '/$userId': typeof UserIdIndexRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof PublicLoginRoute
  '/$userId': typeof UserIdIndexRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public': typeof PublicRouteWithChildren
  '/_public/login': typeof PublicLoginRoute
  '/$userId/': typeof UserIdIndexRoute
  '/_public/': typeof PublicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/$userId' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/$userId' | '/'
  id: '__root__' | '/_public' | '/_public/login' | '/$userId/' | '/_public/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  UserIdIndexRoute: typeof UserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  UserIdIndexRoute: UserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public",
        "/$userId/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login",
        "/_public/"
      ]
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/$userId/": {
      "filePath": "$userId/index.tsx"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
